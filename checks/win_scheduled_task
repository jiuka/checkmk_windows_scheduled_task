#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# win_scheduled_task - Windows NFS Share check
#
# Copyright (C) 2020  Marius Rieder <marius.rieder@scs.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

inventory_win_scheduled_task_rules = []
win_scheduled_tasks = []

def parse_win_scheduled_task(items):
    parsed = {}

    for item in items:
        parsed[item[0]] = {
            'lastResult': saveint(item[1]),
        }
        if len(item) >= 3:
            parsed[item[0]]['lastRun'] = time.strptime(item[2], "%m/%d/%Y %H:%M:%S")
        if len(item) >= 4:
            parsed[item[0]]['nextRun'] = time.strptime(item[3], "%m/%d/%Y %H:%M:%S")
    return parsed

def inventory_win_scheduled_task(parsed):
    for value in host_extra_conf(host_name(), inventory_win_scheduled_task_rules):
        # Now extract the list of service regexes
        discoverd_tasks = set()

        for task in value['tasks']:
            try:
                regex = re.compile(task)
                discoverd_tasks.update(filter(regex.match, parsed.keys()))
            except:
                discoverd_tasks.update(filter(lambda t: t.startswith(task), parsed.keys()))

        if 'groupname' in value:
            yield value['groupname'], {'tasks': discoverd_tasks}
        else:
            for task in discoverd_tasks:
                yield task, { 'tasks': [task]}

def check_win_scheduled_task(item, params, parsed):
    now = time.localtime()

    for task in params['tasks']:
        if task in parsed:
            yield 0, task
            for state, result in params.get('states', [(0,0)]):
                if parsed[task]['lastResult'] == state:
                    if result != 0:
                        yield result, "exit code %d" % parsed[task]['lastResult']
                    break
            else:
                yield params.get('else', 2), "unknown result %d" % parsed[task]['lastResult']


            if 'maxage' in params:
                age = time.mktime(now) - time.mktime(parsed[task]['lastRun'])
                if age >= params['maxage'][1]:
                    yield 2, "Last run on %s" % time.asctime(parsed[task]['lastRun'])
                elif age >= params['maxage'][0]:
                    yield 1, "Last run on %s" % time.asctime(parsed[task]['lastRun'])

        else:
            yield 3, "%s not found" % task

check_info['win_scheduled_task'] = {
  'parse_function' : parse_win_scheduled_task,
  'inventory_function' : inventory_win_scheduled_task,
  'check_function'     : check_win_scheduled_task,
  'service_description': 'Task %s',
  'group': 'win_scheduled_tasks',
}
